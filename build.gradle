import edu.wpi.first.gradlerio.deploy.roborio.RoboRIO

plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2022.4.1"
}

repositories {
	mavenCentral()
	maven {
		url "https://maven.ctr-electronics.com/release"
	}
	maven {
		url "https://maven.photonvision.org/repository/internal"
	}
	maven {
		url "https://maven.photonvision.org/repository/snapshots"
	}
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

// setup properties
def ROBOT_MAIN_CLASS = "frc.robot.Main"
def PROJECT_URL = "git remote get-url origin".execute().text.replaceAll("[\\r\\n]","")
//def COMMIT_VERSION = "git log --pretty=format:\"%H %cd %s\" -- ${projectDir}".execute().text.replaceAll("[\\r\\n]","")
def COMMIT_VERSION = "git log --pretty=oneline -- ${projectDir}".execute().text.replaceAll("[\\r\\n]","")
//println("git log --pretty=oneline  -- ${projectDir}".execute().text)
//println("git log --help".execute().text)
def BUILD_HOST = "hostname".execute().text.replaceAll("[\\r\\n]","")

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = false

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
	implementation wpi.java.deps.wpilib()
	implementation wpi.java.vendor.java()
	
	// phonix
	implementation 'com.ctre.phoenix:api-java:5.21.3'
	implementation 'com.ctre.phoenix:wpiapi-java:5.21.3'
	
	// limelight
	implementation 'org.photonvision:PhotonLib-java:v2022.2.0'
	implementation 'org.photonvision:PhotonTargeting-java:v2022.2.0'
	
	roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
	roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

	roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
	roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

	nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
	nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
	simulationDebug wpi.sim.enableDebug()

	nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
	nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
	simulationRelease wpi.sim.enableRelease()

	testImplementation 'junit:junit:4.13.1'
}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
	manifest {
		attributes 'Main-Class': ROBOT_MAIN_CLASS
		attributes 'Specification-Title': project.name
		attributes 'Specification-Vendor': "Red Storm Robotics"
		attributes 'Implementation-Vendor': PROJECT_URL
		attributes 'Implementation-Version': "${COMMIT_VERSION} -- ${new Date().format("yyyy-MM-dd HH.mm.ss.SSSSS Z")}"
		attributes 'Implementation-Title': "${project.name} at ${BUILD_HOST}:${projectDir}"
	}
	duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

